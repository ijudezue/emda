#!/bin/bash

emdaVer="`cat /etc/emdaVersion`"
#emda-configure
#this is the initial configure script that will initialize a brand new EMDA installation
#this will be run only during the first reboot of the system, then removed and not used again.


emdaHostname="`hostname`"
orgShortName=""
orgLongName=""
primaryEmailDomain=""
primaryEmailServer=""
secondaryEmailDomain=""
secondaryEmailServer=""
ianaCountryCode=""
sysAdminEmail=""
rootEmail=""
webSite=""
backupDate="`date +%Y%m%d-%s`"
mysqlRootPW=""
mailwatchDBPW=""
mailwatchPW=""
countryCode=""
stateName=""

#MailScanner Vars
	numCPU=`grep -c processor /proc/cpuinfo`
	let maxMailScannerChild=$numCPU*5
	webSite=""
	watermarkSecret=""



#initial wizard welcome message --box text heightInRows widthInChars redirectOutputToVar
func_welcome(){
	clear
	echo "Loading EMDA Configuration Wizard..."
	whiptail --title "Welcome to the EMDA Configuration Wizard" --msgbox "This configuration wizard will guide you through setting up your Enterprise Mail Deilvery Appliance. Please press [enter] to continue..." 20 75;
}

func_startMYSQL(){
	service mysqld start
	chkconfig mysqld --add
	chkconfig mysqld on --level 3
}

func_startHTTPD(){
	service httpd start
	chkconfig httpd --add
	chkconfig httpd on --level 3
}

func_startCLAMD(){
	service clamd start
	chkconfig clamd --add
	chkconfig clamd on --level 3
}

func_startSPAM(){
	service spamassassin start
	chkconfig spamassassin --add
	chkconfig spamassassin on --level 3
}

func_startMAILSCAN(){
	service mailscanner start
	chkconfig mailscanner --add
	chkconfig mailscanner on --level 3
}

func_startMAILGRAPH(){
	service mailgraph start
	chkconfig mailgraph --add
	chkconfig mailgraph on --level 3
}

func_startSQLGREY(){
	service sqlgrey start
	chkconfig sqlgrey --add
	chkconfig sqlgrey on --level 3
}

#sets the root password for mysql
func_mysqlRootPW(){
	#mysql must be started first before this
	$mysqlRootPW=$(whiptail --title "MySQL root Password" --passwordbox "Please enter the password for the MySQL root account:" 10 75 3>&1 1>&2 2>&3)
	mysqladmin -u root password $mysqlRootPW
}

#sets the mailwatch db connect password
func_mailwatchDBSetup(){
	#emdadb
	#mysql must be started first before this
	$mailwatchDBPW=$(whiptail --title "MailWatch Database Password" --passwordbox "Please enter the password for the MailWatch Database:" 10 75 3>&1 1>&2 2>&3)
	sed -i "/^GRANT ALL ON emdadb.* TO emdadb@localhost IDENTIFIED BY '<password>';/ c\GRANT ALL ON emdadb.* TO emdadb@localhost IDENTIFIED BY '$mailwatchDBPW';" /root/mailwatch_user.sql
	sed -i "/^define('DB_PASS', '');/ c\define('DB_PASS', '$mailwatchDBPW');" /var/www/html/conf.php
	sed -i "/^my($db_pass) = '';/ c\my($db_pass) = '$mailwatchDBPW';" /usr/lib/MailScanner/MailScanner/CustomFunctions/SQLBlackWhiteList.pm
}

#sets the mailwatch password for emdadmin
func_mailwatchpw(){
	#mysql must be started first before this
	$mailwatchPW=$(whiptail --title "MailWatch EMDAdmin Password" --passwordbox "Please enter the password for the MailWatch web portal account: emdadmin\nThis is the password you will use to log into the web portal. Please remember it." 10 75 3>&1 1>&2 2>&3)
	sed -i "/^INSERT INTO users SET username = 'emdadmin', password = md5('<password>'), fullname = 'EMDAdmin', type ='A'/ c\INSERT INTO users SET username = 'emdadmin', password = md5('$mailwatchPW'), fullname = 'EMDAdmin', type ='A';" /root/mailwatch_user.sql
}

#create the mailwatch db and user
func_createdb(){
	mysql -u root -p$mysqlRootPW < /root/mailwatch_create.sql
	mysql -u emdadb -p$mailwatchDBPW emdadb < /root/mailwatch_user.sql
}

#check for existing configuration
func_checkPriorSetup(){
	#this is a file that is not created by default after installation of EMDA
	if [ -f /etc/postfix/transport.db ]
	then
		whiptail --title "Configuration already completed" --yesno "EMDA has been previously configured. Would you like to keep the existing configuration, or create a new configuration for EMDA?" 10 75 --yes-button "Keep Old" --no-button "Create New (Factory Defaults)"
		if [ $? = 0 ]
		then
			whiptail --title "Keeping Original Configuration" --msgbox "EMDA will preserve the original configurations. Press OK to exit this wizard."
			clear
			exit 0
		else
			whiptail --title "Ready to reset EMDA?" --yesno "Are you sure you want to delete all settings, and reset EMDA to factory defaults? A backup of the current configuration will be created in /root/backups/$backupDate.tar.gz, and the system will be rebooted:" 10 75 --yes-button "Yes, Delete All" --no-button "No"
			if [ $? = 0 ]
			then
				whiptail --title "Unable to Reset" --msgbox "Resetting EMDA to factory defaults has not been implemented yet. Press OK to exit this wizard."
				#rm /etc/postfix/transport.db
				#/usr/bin/emda -defaults
				exit 0
			fi
		fi
	fi
}


#hostname input
func_hostname(){
	emdaHostname=$(whiptail --title "Hostname" --inputbox "Please enter the Hostname for this device: [$emdaHostname]" 10 75 3>&1 1>&2 2>&3)
}

#add email domains
func_addEmailDomains(){
	primaryEmailDomain=$(whiptail --title "Primary Email Domain Name" --inputbox "Please enter the domain name for your primary email recipients: [ex: domain.com]" 10 75 3>&1 1>&2 2>&3)
	primaryEmailServer=$(whiptail --title "Primary Mail Hostname/IP" --inputbox "Please enter the Hostname or IP Address for the server receiving email for $primaryEmailDomain:" 10 75 3>&1 1>&2 2>&3)
	whiptail --title "Additional Domains" --yesno "Is there an additional email domain name you would like to add?" 10 75
	if [ $? = 0 ]
	then
		secondaryEmailDomain=$(whiptail --title "Secondary Mail Domain" --inputbox "Please enter the domain name of your secondary email recipients: [ex: domaintwo.com]" 10 75 3>&1 1>&2 2>&3)
		secondaryEmailServer=$(whiptail --title "Secondary Mail Hostname/IP" --inputbox "Please enter the Hostname or IP Address for the server receiving email for $secondaryEmailDomain:" 10 75 3>&1 1>&2 2>&3)
	fi
}

#System adminsitrator email
func_sysAdminEmail(){
	sysAdminEmail=$(whiptail --title "System Administrator Email" --inputbox "Please enter the email for the Systems Adminsitrator for $primaryEmailDomain:" 10 75 3>&1 1>&2 2>&3)
	rootEmail=$sysAdminEmail
	rootEmail=$(whiptail --title "Root Mail Delivery Address" --inputbox "What email address should email to \"root\" go to?: [$sysAdminEmail]" 10 75 3>&1 1>&2 2>&3)
}

#website for MailScanner
func_webSite(){
	webSite="www.$primaryEmailDomain"
	webSite=$(whiptail --title "Web Address" --inputbox "Please enter the website address for the email domain of $primaryEmailDomain: [$webSite]"  10 75 3>&1 1>&2 2>&3)
}

#Generate TLS keys for postfix
func_genKeyTLS(){
	$countryCode=$(whiptail --title "Two Letter Country Code" --inputbox "Please enter the two letter country code where your organization resides in: [ex: us]"  10 75 3>&1 1>&2 2>&3)
	$stateName=$(whiptail --title "Name of State/Province" --inputbox "Please enter the name of the state/province where your organization resides in: [ex: New York]"  10 75 3>&1 1>&2 2>&3)
	$watermarkSecret=$(whiptail --title "TLS/Watermark Password" --passwordbox "Please enter the password for the for the TLS certificate and postfix watermark secret:" 10 75 3>&1 1>&2 2>&3)

	if [ ! -d /etc/postfix/ssl ]
	then
		mkdir /etc/postfix/ssl
		cd /etc/postfix/ssl
		openssl req -new -x509 -nodes -out smtpd.pem -keyout smtpd.pem -days 3650 -subj "/O=$orgLongName/OU=$orgShortName/CN=$countryCode" -passout pass:$watermarkSecret
	else
		cd /etc/postfix/ssl
		openssl req -new -x509 -nodes -out smtpd.pem -keyout smtpd.pem -days 3650 -subj "/O=$orgLongName/OU=$orgShortName/CN=$countryCode" -passout pass:$watermarkSecret
	fi
}

#questions on how the user wants emda to be configured
func_mailscannerSetup(){
	signClean=$(whiptail --title "Sign Clean Emails?" --yesno "Do you want clean [non-spam] emails to have a signature placed at the bottom of the email?\n\(If the email was not marked as spam, the user can click the link in the signature for EMDA to learn it as spam\)" 10 75 --yes-button "Yes" --no-button "No" 3>&1 1>&2 2>&3)
	if [ $? = 0 ]
	then
		sed -i "/^Sign Clean Messages = no/ c\Sign Clean Messages = yes" /etc/MailScanner/MailScanner.conf
	fi

}

#configure transport map
func_confTransport(){
	sed -i "/$emdaHostname/d" /etc/postfix/transport
	echo "$emdaHostname smtp:[$primaryEmailServer]" >> /etc/postfix/transport
	sed -i "/^$primaryEmailDomain/d" /etc/postfix/transport
	echo "$primaryEmailDomain smtp:[$primaryEmailServer]" >> /etc/postfix/transport
	if [ $secondaryEmailDomain ] && [ $secondaryEmailServer ]
		then
			sed -i "/$secondaryEmailDomain/d" /etc/postfix/transport
			echo "$secondaryEmailDomain smtp:[$secondaryEmailServer]" >> /etc/postfix/transport
	fi
	rm -f /etc/postfix/transport.db
	postmap /etc/postfix/transport
	postfix reload
}

#configuring root's email
func_rootEmail(){
	sed -i '/root:/d' /etc/aliases
	echo "root: $1" >> /etc/aliases
	rm -f /etc/aliases.db
	newaliases
}

#configure MailScanner
func_confMailScanner(){
	sed -i "/^%org-name% =/ c\%org-name% = $orgShortName" /etc/MailScanner/MailScanner.conf
	sed -i "/^%org-long-name% =/ c\%org-long-name% = $orgLongName" /etc/MailScanner/MailScanner.conf
	sed -i "/^%web-site% =/ c\%web-site% = $webSite" /etc/MailScanner/MailScanner.conf
	#guide is 5 children per cpu
	sed -i "/^Max Children =/ c\Max Children = $maxMailScannerChild" /etc/MailScanner/MailScanner.conf
	sed -i "/^Watermark Secret =/ c\Watermark Secret = $watermarkSecret" /etc/MailScanner/MailScanner.conf
	sed -i "/^Unscanned Header Value =/ c\Unscanned Header Value = Please contact $orgLongName for details" /etc/MailScanner/MailScanner.conf
}

#clears emda first boot from booting on next boot
func_removeFirstBoot(){
	sed -i "/^exec /sbin/mingetty --autologin root tty1/ c\exec /sbin/mingetty $TTY" /etc/init/tty.conf
	sed -i '/usr/bin/emda -setup/d' /etc/bashrc
}

func_showHelp(){
	echo " "
	echo "Usage: emda [-OPTION]"
	echo "   or: emda [-setup]"
	echo " "
	echo "This is the EMDA Wizard. Here is the list of available emda options:"
	echo " -setup		:is for first time users and initial installs."
	echo " -import	:allows an existing ESVA 2.0.6.1 to be imported into this EMDA appliance"
	echo " -defaults	:resets the system back to the initial installed state; a factory reset."
	echo " -help		:displays this message."
	echo " -version	:will display what version EMDA is currently running."
	echo " -update	:this will run the emdaupdate tool."
	echo " "
	echo "Available options:"
	echo "	-version"
	echo "	-setup"
	echo "	-import"
	echo "	-defaults"
	echo "	-update"
	echo "	-help"
	echo " "
	exit 0
}

main(){
	case "$1" in
		'-setup')
			func_welcome
			func_checkPriorSetup
			func_hostname
			func_addEmailDomains
			#func_checkInput
			func_sysAdminEmail $rootEmail
			func_webSite
			func_mailscannerSetup
			clear
			func_startMYSQL
			func_mysqlRootPW
			#func_checkpassword
			func_mailwatchDBSetup
			#func_checkpassword
			func_mailwatchpw
			#func_checkpassword
			func_createdb
			func_confTransport
			func_rootEmail $rootEmail
			func_genKeyTLS
			func_confMailScanner
			clear
			func_startHTTPD
			func_startCLAMD
			func_startSPAM
			func_startMAILSCAN
			func_startMAILGRAPH
			func_startSQLGREY
			func_removeFirstBoot
			whiptail --title "EMDA Wizard Finished" --msgbox "This concludes the setup of EMDA. Press OK to reboot." 20 75
			clear
			echo "Rebooting in three seconds..."
			sleep 3
			shutdown -r now
			exit 0
		;;
		'-defaults')
			whiptail --title "EMDA Factory Defaults" --msgbox "The factory default feature has not been implemented yet. Thank you. Press OK to exit this wizard." 20 75
			exit 0
		;;
		'-import')
			#cannot import if the EMDA has already been configured
			whiptail --title "Import From ESVA 2.0.6.1" --msgbox "The import feature has not been implemented yet. Thank you. Press OK to exit this wizard." 20 75
			exit 0
		;;
		'-help')
			func_showHelp
			exit 0
		;;
		'-update')
			emdaupdate
			exit 0
		;;
		'-version')
			echo "EMDA version: `cat /etc/emdaVersion`"
			exit 0
		;;
		*)
			func_showHelp
			exit 0
		;;
	esac	
}

main $1

exit 0
